{"version":3,"sources":["components/Statistic/Statistic.module.css","components/Feedback/Feedback.js","components/Section/SectionTitle.js","components/Statistic/Statistic.js","components/Notification/Notification.js","App.js","index.js","components/Feedback/Feedback.module.css","App.module.css"],"names":["module","exports","Feedback","options","onIncrement","nameButton","Object","keys","map","button","Button","className","s","type","name","variant","onClick","SectionTitle","title","children","Statistic","good","neutral","bad","countTotal","countPositive","list","Notification","App","state","props","initialValue","hanleIncrement","e","target","setState","prev","countTotalFeedback","countPositiveFeedbackPercentage","Math","ceil","this","app","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,KAAO,0B,4KCwBVC,EAnBE,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YACrBC,EAAaC,OAAOC,KAAKJ,GAC/B,OACE,8BACGE,EAAWG,KAAI,SAAAC,GAAM,OACpB,cAACC,EAAA,EAAD,CAEEC,UAAWC,IAAEH,OACbI,KAAK,SACLC,KAAML,EACNM,QAAQ,kBACRC,QAASZ,EANX,SAQGK,GAPIA,S,gBCHAQ,EAPM,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACnB,oCACE,6BAAKD,IACJC,M,iBCYUC,EAdG,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACnD,OACE,qBAAId,UAAWC,IAAEc,KAAjB,UACE,wCAAWL,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,oDAEGC,GAAgC,EAFnC,WCLSE,EAHM,WACnB,OAAO,mDCIHC,E,4MAKJC,MAAQ,CACNR,KAAM,EAAKS,MAAMC,aACjBT,QAAS,EAAKQ,MAAMC,aACpBR,IAAK,EAAKO,MAAMC,c,EAGlBC,eAAiB,SAAAC,GACf,IAAIC,EAASD,EAAEC,OAAOpB,KACtB,EAAKqB,UAAS,SAAAC,GAAI,sBACfF,EAASE,EAAKF,GAAU,O,EAI7BG,mBAAqB,WACnB,OAAO,EAAKR,MAAMN,IAAM,EAAKM,MAAMP,QAAU,EAAKO,MAAMR,M,EAE1DiB,gCAAkC,WAChC,OAAOC,KAAKC,KAAM,EAAKX,MAAMR,KAAO,EAAKgB,qBAAwB,M,4CAGnE,WAAU,IAAD,EACwBI,KAAKZ,MAA5BR,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,0BAASZ,UAAWC,IAAE8B,IAAtB,UACE,cAAC,EAAD,aAAcxB,MAAM,wBAAwBC,UAAQ,GAApD,WACE,cAAC,EAAD,CACEhB,QAAS,CAAEkB,OAAMC,UAASC,OAC1BnB,YAAaqC,KAAKT,mBAIrBS,KAAKJ,qBAAuB,EAC3B,cAAC,EAAD,aAAcnB,MAAM,aAAaC,UAAQ,GAAzC,WACE,cAAC,EAAD,CACEE,KAAMoB,KAAKZ,MAAMR,KACjBC,QAASmB,KAAKZ,MAAMP,QACpBC,IAAKkB,KAAKZ,MAAMN,IAChBC,WAAYiB,KAAKJ,qBACjBZ,cAAegB,KAAKH,sCAIxB,cAAC,EAAD,W,GA/CQK,aAAZf,EACGgB,aAAe,CACpBb,aAAc,GAoDHH,Q,YCvDfiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BjD,EAAOC,QAAU,CAAC,OAAS,2B,kBCA3BD,EAAOC,QAAU,CAAC,IAAM,oB","file":"static/js/main.d2d460cb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistic_list__1TOpx\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport s from './Feedback.module.css';\n\nconst Feedback = ({ options, onIncrement }) => {\n  const nameButton = Object.keys(options);\n  return (\n    <div>\n      {nameButton.map(button => (\n        <Button\n          key={button}\n          className={s.button}\n          type=\"button\"\n          name={button}\n          variant=\"outline-warning\"\n          onClick={onIncrement}\n        >\n          {button}\n        </Button>\n      ))}\n    </div>\n  );\n};\nexport default Feedback;\nFeedback.propTypes = {\n  onIncrement: PropTypes.func.isRequired,\n  options: PropTypes.shape({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nconst SectionTitle = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nexport default SectionTitle;\nSectionTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Statistic.module.css';\nconst Statistic = ({ good, neutral, bad, countTotal, countPositive }) => {\n  return (\n    <ul className={s.list}>\n      <li>Good: {good}</li>\n      <li>Neutral: {neutral}</li>\n      <li>Bad: {bad}</li>\n      <li>Total: {countTotal}</li>\n      <li>\n        Positive feedback:\n        {countPositive ? countPositive : 0}%\n      </li>\n    </ul>\n  );\n};\nexport default Statistic;\nStatistic.propTypes = {\n  countTotal: PropTypes.number.isRequired,\n  countPositive: PropTypes.number.isRequired,\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n};\n","import React from 'react';\n\nconst Notification = () => {\n  return <p>No feedback given</p>;\n};\nexport default Notification;\n","import React, { Component } from 'react';\nimport Feedback from './components/Feedback/Feedback';\nimport PropTypes from 'prop-types';\nimport s from './App.module.css';\nimport SectionTitle from './components/Section';\nimport Statistic from './components/Statistic';\nimport Notification from './components/Notification';\nclass App extends Component {\n  static defaultProps = {\n    initialValue: 0,\n  };\n\n  state = {\n    good: this.props.initialValue,\n    neutral: this.props.initialValue,\n    bad: this.props.initialValue,\n  };\n\n  hanleIncrement = e => {\n    let target = e.target.name;\n    this.setState(prev => ({\n      [target]: prev[target] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    return this.state.bad + this.state.neutral + this.state.good;\n  };\n  countPositiveFeedbackPercentage = () => {\n    return Math.ceil((this.state.good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <section className={s.app}>\n        <SectionTitle title=\"Please leave feedback\" children>\n          <Feedback\n            options={{ good, neutral, bad }}\n            onIncrement={this.hanleIncrement}\n          />\n        </SectionTitle>\n\n        {this.countTotalFeedback() > 0 ? (\n          <SectionTitle title=\"Statistics\" children>\n            <Statistic\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              countTotal={this.countTotalFeedback()}\n              countPositive={this.countPositiveFeedbackPercentage()}\n            />\n          </SectionTitle>\n        ) : (\n          <Notification />\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\nApp.propTypes = {\n  initialValue: PropTypes.number,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Feedback_button__32yrl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__27p9D\"};"],"sourceRoot":""}